// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BucketInitParameters struct {

	// User-defined information to be stored with the bucket.
	// +mapType=granular
	BucketInfo map[string]*string `json:"bucketInfo,omitempty" tf:"bucket_info,omitempty"`

	// The name of the bucket.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
	BucketType *string `json:"bucketType,omitempty" tf:"bucket_type,omitempty"`

	// The initial list of CORS rules for this bucket.
	CorsRules []CorsRulesInitParameters `json:"corsRules,omitempty" tf:"cors_rules,omitempty"`

	// The default server-side encryption settings for this bucket.
	DefaultServerSideEncryption []DefaultServerSideEncryptionInitParameters `json:"defaultServerSideEncryption,omitempty" tf:"default_server_side_encryption,omitempty"`

	// File lock enabled flag, and default retention settings.
	FileLockConfiguration []FileLockConfigurationInitParameters `json:"fileLockConfiguration,omitempty" tf:"file_lock_configuration,omitempty"`

	// The initial list of lifecycle rules for this bucket.
	LifecycleRules []LifecycleRulesInitParameters `json:"lifecycleRules,omitempty" tf:"lifecycle_rules,omitempty"`
}

type BucketObservation struct {

	// Account ID that the bucket belongs to.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// The ID of the bucket.
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// User-defined information to be stored with the bucket.
	// +mapType=granular
	BucketInfo map[string]*string `json:"bucketInfo,omitempty" tf:"bucket_info,omitempty"`

	// The name of the bucket.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
	BucketType *string `json:"bucketType,omitempty" tf:"bucket_type,omitempty"`

	// The initial list of CORS rules for this bucket.
	CorsRules []CorsRulesObservation `json:"corsRules,omitempty" tf:"cors_rules,omitempty"`

	// The default server-side encryption settings for this bucket.
	DefaultServerSideEncryption []DefaultServerSideEncryptionObservation `json:"defaultServerSideEncryption,omitempty" tf:"default_server_side_encryption,omitempty"`

	// File lock enabled flag, and default retention settings.
	FileLockConfiguration []FileLockConfigurationObservation `json:"fileLockConfiguration,omitempty" tf:"file_lock_configuration,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The initial list of lifecycle rules for this bucket.
	LifecycleRules []LifecycleRulesObservation `json:"lifecycleRules,omitempty" tf:"lifecycle_rules,omitempty"`

	// List of bucket options.
	// +listType=set
	Options []*string `json:"options,omitempty" tf:"options,omitempty"`

	// Bucket revision.
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`
}

type BucketParameters struct {

	// User-defined information to be stored with the bucket.
	// +kubebuilder:validation:Optional
	// +mapType=granular
	BucketInfo map[string]*string `json:"bucketInfo,omitempty" tf:"bucket_info,omitempty"`

	// The name of the bucket.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The bucket type. Either 'allPublic', meaning that files in this bucket can be downloaded by anybody, or 'allPrivate'.
	// +kubebuilder:validation:Optional
	BucketType *string `json:"bucketType,omitempty" tf:"bucket_type,omitempty"`

	// The initial list of CORS rules for this bucket.
	// +kubebuilder:validation:Optional
	CorsRules []CorsRulesParameters `json:"corsRules,omitempty" tf:"cors_rules,omitempty"`

	// The default server-side encryption settings for this bucket.
	// +kubebuilder:validation:Optional
	DefaultServerSideEncryption []DefaultServerSideEncryptionParameters `json:"defaultServerSideEncryption,omitempty" tf:"default_server_side_encryption,omitempty"`

	// File lock enabled flag, and default retention settings.
	// +kubebuilder:validation:Optional
	FileLockConfiguration []FileLockConfigurationParameters `json:"fileLockConfiguration,omitempty" tf:"file_lock_configuration,omitempty"`

	// The initial list of lifecycle rules for this bucket.
	// +kubebuilder:validation:Optional
	LifecycleRules []LifecycleRulesParameters `json:"lifecycleRules,omitempty" tf:"lifecycle_rules,omitempty"`
}

type CorsRulesInitParameters struct {

	// If present, this is a list of headers that are allowed in a pre-flight OPTIONS's request's Access-Control-Request-Headers header value.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// A list specifying which operations the rule allows.
	AllowedOperations []*string `json:"allowedOperations,omitempty" tf:"allowed_operations,omitempty"`

	// A non-empty list specifying which origins the rule covers.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// A name for humans to recognize the rule in a user interface.
	CorsRuleName *string `json:"corsRuleName,omitempty" tf:"cors_rule_name,omitempty"`

	// If present, this is a list of headers that may be exposed to an application inside the client.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// This specifies the maximum number of seconds that a browser may cache the response to a preflight request.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRulesObservation struct {

	// If present, this is a list of headers that are allowed in a pre-flight OPTIONS's request's Access-Control-Request-Headers header value.
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// A list specifying which operations the rule allows.
	AllowedOperations []*string `json:"allowedOperations,omitempty" tf:"allowed_operations,omitempty"`

	// A non-empty list specifying which origins the rule covers.
	AllowedOrigins []*string `json:"allowedOrigins,omitempty" tf:"allowed_origins,omitempty"`

	// A name for humans to recognize the rule in a user interface.
	CorsRuleName *string `json:"corsRuleName,omitempty" tf:"cors_rule_name,omitempty"`

	// If present, this is a list of headers that may be exposed to an application inside the client.
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// This specifies the maximum number of seconds that a browser may cache the response to a preflight request.
	MaxAgeSeconds *float64 `json:"maxAgeSeconds,omitempty" tf:"max_age_seconds,omitempty"`
}

type CorsRulesParameters struct {

	// If present, this is a list of headers that are allowed in a pre-flight OPTIONS's request's Access-Control-Request-Headers header value.
	// +kubebuilder:validation:Optional
	AllowedHeaders []*string `json:"allowedHeaders,omitempty" tf:"allowed_headers,omitempty"`

	// A list specifying which operations the rule allows.
	// +kubebuilder:validation:Optional
	AllowedOperations []*string `json:"allowedOperations" tf:"allowed_operations,omitempty"`

	// A non-empty list specifying which origins the rule covers.
	// +kubebuilder:validation:Optional
	AllowedOrigins []*string `json:"allowedOrigins" tf:"allowed_origins,omitempty"`

	// A name for humans to recognize the rule in a user interface.
	// +kubebuilder:validation:Optional
	CorsRuleName *string `json:"corsRuleName" tf:"cors_rule_name,omitempty"`

	// If present, this is a list of headers that may be exposed to an application inside the client.
	// +kubebuilder:validation:Optional
	ExposeHeaders []*string `json:"exposeHeaders,omitempty" tf:"expose_headers,omitempty"`

	// This specifies the maximum number of seconds that a browser may cache the response to a preflight request.
	// +kubebuilder:validation:Optional
	MaxAgeSeconds *float64 `json:"maxAgeSeconds" tf:"max_age_seconds,omitempty"`
}

type DefaultRetentionInitParameters struct {

	// Default retention mode (compliance|governance|none).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// How long for to make files immutable
	Period []PeriodInitParameters `json:"period,omitempty" tf:"period,omitempty"`
}

type DefaultRetentionObservation struct {

	// Default retention mode (compliance|governance|none).
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// How long for to make files immutable
	Period []PeriodObservation `json:"period,omitempty" tf:"period,omitempty"`
}

type DefaultRetentionParameters struct {

	// Default retention mode (compliance|governance|none).
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// How long for to make files immutable
	// +kubebuilder:validation:Optional
	Period []PeriodParameters `json:"period,omitempty" tf:"period,omitempty"`
}

type DefaultServerSideEncryptionInitParameters struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Server-side encryption mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type DefaultServerSideEncryptionObservation struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Server-side encryption mode.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type DefaultServerSideEncryptionParameters struct {

	// Server-side encryption algorithm. AES256 is the only one supported.
	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// Server-side encryption mode.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`
}

type FileLockConfigurationInitParameters struct {

	// Default retention settings for files uploaded to this bucket
	DefaultRetention []DefaultRetentionInitParameters `json:"defaultRetention,omitempty" tf:"default_retention,omitempty"`

	// If present, the boolean value specifies whether bucket is File Lock-enabled. Defaults to `false`.
	IsFileLockEnabled *bool `json:"isFileLockEnabled,omitempty" tf:"is_file_lock_enabled,omitempty"`
}

type FileLockConfigurationObservation struct {

	// Default retention settings for files uploaded to this bucket
	DefaultRetention []DefaultRetentionObservation `json:"defaultRetention,omitempty" tf:"default_retention,omitempty"`

	// If present, the boolean value specifies whether bucket is File Lock-enabled. Defaults to `false`.
	IsFileLockEnabled *bool `json:"isFileLockEnabled,omitempty" tf:"is_file_lock_enabled,omitempty"`
}

type FileLockConfigurationParameters struct {

	// Default retention settings for files uploaded to this bucket
	// +kubebuilder:validation:Optional
	DefaultRetention []DefaultRetentionParameters `json:"defaultRetention,omitempty" tf:"default_retention,omitempty"`

	// If present, the boolean value specifies whether bucket is File Lock-enabled. Defaults to `false`.
	// +kubebuilder:validation:Optional
	IsFileLockEnabled *bool `json:"isFileLockEnabled,omitempty" tf:"is_file_lock_enabled,omitempty"`
}

type LifecycleRulesInitParameters struct {

	// It says how long to keep file versions that are not the current version.
	DaysFromHidingToDeleting *float64 `json:"daysFromHidingToDeleting,omitempty" tf:"days_from_hiding_to_deleting,omitempty"`

	// It causes files to be hidden automatically after the given number of days.
	DaysFromUploadingToHiding *float64 `json:"daysFromUploadingToHiding,omitempty" tf:"days_from_uploading_to_hiding,omitempty"`

	// It specifies which files in the bucket it applies to.
	FileNamePrefix *string `json:"fileNamePrefix,omitempty" tf:"file_name_prefix,omitempty"`
}

type LifecycleRulesObservation struct {

	// It says how long to keep file versions that are not the current version.
	DaysFromHidingToDeleting *float64 `json:"daysFromHidingToDeleting,omitempty" tf:"days_from_hiding_to_deleting,omitempty"`

	// It causes files to be hidden automatically after the given number of days.
	DaysFromUploadingToHiding *float64 `json:"daysFromUploadingToHiding,omitempty" tf:"days_from_uploading_to_hiding,omitempty"`

	// It specifies which files in the bucket it applies to.
	FileNamePrefix *string `json:"fileNamePrefix,omitempty" tf:"file_name_prefix,omitempty"`
}

type LifecycleRulesParameters struct {

	// It says how long to keep file versions that are not the current version.
	// +kubebuilder:validation:Optional
	DaysFromHidingToDeleting *float64 `json:"daysFromHidingToDeleting,omitempty" tf:"days_from_hiding_to_deleting,omitempty"`

	// It causes files to be hidden automatically after the given number of days.
	// +kubebuilder:validation:Optional
	DaysFromUploadingToHiding *float64 `json:"daysFromUploadingToHiding,omitempty" tf:"days_from_uploading_to_hiding,omitempty"`

	// It specifies which files in the bucket it applies to.
	// +kubebuilder:validation:Optional
	FileNamePrefix *string `json:"fileNamePrefix" tf:"file_name_prefix,omitempty"`
}

type PeriodInitParameters struct {

	// Duration
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Unit for duration (days|years)
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type PeriodObservation struct {

	// Duration
	Duration *float64 `json:"duration,omitempty" tf:"duration,omitempty"`

	// Unit for duration (days|years)
	Unit *string `json:"unit,omitempty" tf:"unit,omitempty"`
}

type PeriodParameters struct {

	// Duration
	// +kubebuilder:validation:Optional
	Duration *float64 `json:"duration" tf:"duration,omitempty"`

	// Unit for duration (days|years)
	// +kubebuilder:validation:Optional
	Unit *string `json:"unit" tf:"unit,omitempty"`
}

// BucketSpec defines the desired state of Bucket
type BucketSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BucketParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BucketInitParameters `json:"initProvider,omitempty"`
}

// BucketStatus defines the observed state of Bucket.
type BucketStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BucketObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Bucket is the Schema for the Buckets API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,backblaze}
type Bucket struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketName) || (has(self.initProvider) && has(self.initProvider.bucketName))",message="spec.forProvider.bucketName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.bucketType) || (has(self.initProvider) && has(self.initProvider.bucketType))",message="spec.forProvider.bucketType is a required parameter"
	Spec   BucketSpec   `json:"spec"`
	Status BucketStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BucketList contains a list of Buckets
type BucketList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Bucket `json:"items"`
}

// Repository type metadata.
var (
	Bucket_Kind             = "Bucket"
	Bucket_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Bucket_Kind}.String()
	Bucket_KindAPIVersion   = Bucket_Kind + "." + CRDGroupVersion.String()
	Bucket_GroupVersionKind = CRDGroupVersion.WithKind(Bucket_Kind)
)

func init() {
	SchemeBuilder.Register(&Bucket{}, &BucketList{})
}
