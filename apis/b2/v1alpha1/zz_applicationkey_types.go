// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApplicationKeyInitParameters struct {

	// When present, restricts access to one bucket.
	// +crossplane:generate:reference:type=Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("bucket_id",true)
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketIDRef *v1.Reference `json:"bucketIdRef,omitempty" tf:"-"`

	// Selector for a Bucket to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketIDSelector *v1.Selector `json:"bucketIdSelector,omitempty" tf:"-"`

	// A set of strings, each one naming a capability the key has.
	// +listType=set
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// The name of the key.
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// When present, restricts access to files whose names start with the prefix.
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`
}

type ApplicationKeyObservation struct {

	// The ID of the newly created key.
	ApplicationKeyID *string `json:"applicationKeyId,omitempty" tf:"application_key_id,omitempty"`

	// When present, restricts access to one bucket.
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// A set of strings, each one naming a capability the key has.
	// +listType=set
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the key.
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// When present, restricts access to files whose names start with the prefix.
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`

	// List of application key options.
	// +listType=set
	Options []*string `json:"options,omitempty" tf:"options,omitempty"`
}

type ApplicationKeyParameters struct {

	// When present, restricts access to one bucket.
	// +crossplane:generate:reference:type=Bucket
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("bucket_id",true)
	// +kubebuilder:validation:Optional
	BucketID *string `json:"bucketId,omitempty" tf:"bucket_id,omitempty"`

	// Reference to a Bucket to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketIDRef *v1.Reference `json:"bucketIdRef,omitempty" tf:"-"`

	// Selector for a Bucket to populate bucketId.
	// +kubebuilder:validation:Optional
	BucketIDSelector *v1.Selector `json:"bucketIdSelector,omitempty" tf:"-"`

	// A set of strings, each one naming a capability the key has.
	// +kubebuilder:validation:Optional
	// +listType=set
	Capabilities []*string `json:"capabilities,omitempty" tf:"capabilities,omitempty"`

	// The name of the key.
	// +kubebuilder:validation:Optional
	KeyName *string `json:"keyName,omitempty" tf:"key_name,omitempty"`

	// When present, restricts access to files whose names start with the prefix.
	// +kubebuilder:validation:Optional
	NamePrefix *string `json:"namePrefix,omitempty" tf:"name_prefix,omitempty"`
}

// ApplicationKeySpec defines the desired state of ApplicationKey
type ApplicationKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ApplicationKeyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ApplicationKeyInitParameters `json:"initProvider,omitempty"`
}

// ApplicationKeyStatus defines the observed state of ApplicationKey.
type ApplicationKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ApplicationKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// ApplicationKey is the Schema for the ApplicationKeys API. <no value>
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,backblaze}
type ApplicationKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.capabilities) || (has(self.initProvider) && has(self.initProvider.capabilities))",message="spec.forProvider.capabilities is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.keyName) || (has(self.initProvider) && has(self.initProvider.keyName))",message="spec.forProvider.keyName is a required parameter"
	Spec   ApplicationKeySpec   `json:"spec"`
	Status ApplicationKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ApplicationKeyList contains a list of ApplicationKeys
type ApplicationKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ApplicationKey `json:"items"`
}

// Repository type metadata.
var (
	ApplicationKey_Kind             = "ApplicationKey"
	ApplicationKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ApplicationKey_Kind}.String()
	ApplicationKey_KindAPIVersion   = ApplicationKey_Kind + "." + CRDGroupVersion.String()
	ApplicationKey_GroupVersionKind = CRDGroupVersion.WithKind(ApplicationKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ApplicationKey{}, &ApplicationKeyList{})
}
