name: Release

on:
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.21'
  REGISTRY: ghcr.io
  IMAGE_NAME: markopolo123/provider-backblaze

jobs:
  release:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Get Release Version
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Image
        run: |
          make build
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --push \
            -f cluster/images/provider-backblaze/Dockerfile \
            .

      - name: Build Package
        run: |
          make xpkg.build
          mv _output/xpkg/linux_amd64/provider-backblaze-*.xpkg _output/xpkg/linux_amd64/provider-backblaze-${{ steps.get_version.outputs.VERSION }}.xpkg

      - name: Generate Release Notes
        run: |
          cat > release-notes.md << EOF
          # Provider Backblaze ${{ steps.get_version.outputs.VERSION }}
          
          ## Features
          - Backblaze B2 bucket management
          - Application key management with capability restrictions
          - Bucket file management and versioning
          - Full Crossplane integration with upjet
          
          ## Installation
          
          ### Using Crossplane Package Manager
          \`\`\`bash
          kubectl apply -f - <<EOF
          apiVersion: pkg.crossplane.io/v1
          kind: Provider
          metadata:
            name: provider-backblaze
          spec:
            package: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.get_version.outputs.VERSION }}
          EOF
          \`\`\`
          
          ### Using Helm (if available)
          \`\`\`bash
          helm install provider-backblaze oci://${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --version ${{ steps.get_version.outputs.VERSION }}
          \`\`\`
          
          ## Resources
          - \`Bucket\` - Manage B2 buckets with lifecycle rules, CORS, and encryption
          - \`ApplicationKey\` - Manage B2 application keys with scoped permissions
          - \`BucketFileVersion\` - Manage file uploads and versions
          
          ## Configuration
          
          1. Create a secret with your B2 credentials:
          \`\`\`bash
          kubectl create secret generic b2-creds \\
            --from-literal=credentials='{"application_key_id":"your_id","application_key":"your_key"}'
          \`\`\`
          
          2. Create a ProviderConfig:
          \`\`\`yaml
          apiVersion: backblaze.upbound.io/v1beta1
          kind: ProviderConfig
          metadata:
            name: default
          spec:
            credentials:
              source: Secret
              secretRef:
                name: b2-creds
                key: credentials
          \`\`\`
          
          ## Documentation
          - [Getting Started](https://github.com/markopolo123/provider-backblaze/blob/main/README.md)
          - [API Reference](https://doc.crds.dev/github.com/markopolo123/provider-backblaze)
          - [Examples](https://github.com/markopolo123/provider-backblaze/tree/main/examples)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          name: ${{ steps.get_version.outputs.VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: false
          files: |
            _output/xpkg/linux_amd64/provider-backblaze-${{ steps.get_version.outputs.VERSION }}.xpkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Package Registry
        run: |
          # Push to OCI registry if configured
          if [ -n "${{ secrets.OCI_REGISTRY_TOKEN }}" ]; then
            echo "Pushing to OCI registry..."
            # Add OCI registry push logic here
          fi