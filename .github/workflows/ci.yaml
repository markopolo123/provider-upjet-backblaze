name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54.0'

jobs:
  detect-noop:
    runs-on: ubuntu-22.04
    outputs:
      noop: ${{ steps.noop.outputs.should_skip }}
    steps:
      - name: Detect No-op Changes
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg"]'
          do_not_skip: '["workflow_dispatch", "schedule", "push"]'

  lint:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Vendor Dependencies
        run: go mod download

      - name: Lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --timeout=10m

  test:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Vendor Dependencies
        run: go mod download

      - name: Run Unit Tests
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  build:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Vendor Dependencies
        run: go mod download

      - name: Build
        run: |
          make build
          make generate

      - name: Check for Uncommitted Changes
        run: |
          git diff --exit-code
          if [ $? -ne 0 ]; then
            echo "Found uncommitted changes after build/generate"
            exit 1
          fi

  e2e:
    runs-on: ubuntu-22.04
    needs: detect-noop
    if: needs.detect-noop.outputs.noop != 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Setup Kind
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: provider-backblaze-testing
          config: cluster/kind-config.yaml

      - name: Install Crossplane
        run: |
          kubectl create namespace crossplane-system
          helm repo add crossplane-stable https://charts.crossplane.io/stable
          helm repo update
          helm install crossplane crossplane-stable/crossplane \
            --namespace crossplane-system \
            --create-namespace \
            --wait

      - name: Build and Load Provider Image
        run: |
          make build
          kind load docker-image provider-backblaze:latest --name provider-backblaze-testing

      - name: Install Provider
        run: |
          make local-deploy
          kubectl wait provider.pkg provider-backblaze --for condition=Healthy --timeout=300s

      - name: Run E2E Tests
        env:
          UPTEST_CLOUD_CREDENTIALS: ${{ secrets.UPTEST_CLOUD_CREDENTIALS }}
          UPTEST_EXAMPLE_LIST: "examples/bucket/bucket.yaml,examples/applicationkey/applicationkey.yaml"
        run: |
          if [ -n "$UPTEST_CLOUD_CREDENTIALS" ]; then
            make uptest
          else
            echo "Skipping E2E tests - UPTEST_CLOUD_CREDENTIALS not set"
          fi

  publish-artifacts:
    runs-on: ubuntu-22.04
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Image
        run: |
          make build
          docker tag provider-backblaze:latest ghcr.io/markopolo123/provider-backblaze:latest
          docker tag provider-backblaze:latest ghcr.io/markopolo123/provider-backblaze:${GITHUB_SHA::8}
          docker push ghcr.io/markopolo123/provider-backblaze:latest
          docker push ghcr.io/markopolo123/provider-backblaze:${GITHUB_SHA::8}

      - name: Build and Push Package
        run: |
          make xpkg.build
          docker tag provider-backblaze:latest ghcr.io/markopolo123/provider-backblaze:latest
          docker push ghcr.io/markopolo123/provider-backblaze:latest